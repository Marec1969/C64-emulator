#ifndef KEYMAP_H
#define KEYMAP_H

#include <stdint.h>
#include <windows.h>

typedef struct {
    int portA1;   // Anschluss Port A
    int portB1;   // Anschluss Port B
    int portA2;   // Anschluss Port A
    int portB2;   // Anschluss Port B
    int keycode;  // Belegung einfach (zweites Zeichen, Windows Konstante)
} KeyMapping;

#ifdef INLUDE_KEYMAP
KeyMapping keyMappingsWParam[] = {
    {0x01, 0x04, 0x02, 0x80, 37},  // Cursor  -> left
    {0x01, 0x80, 0x02, 0x80, 38},  // Cursor  -> up
    {0x01, 0x04, 0x00, 0x00, 39},  // Cursor  -> right
    {0x01, 0x80, 0x00, 0x00, 40},  // Cursor  -> right
    {0x80, 0x04, 0x00, 0x00, 27},  // ESC -> CTRL
};

KeyMapping stickMappingsWParam[] = {
    {0x01, 0x00, 0x00, 0x00, 36},  // Stick 1 -> up
    {0x02, 0x00, 0x00, 0x00, 35},  // Stick 1 -> down
    {0x04, 0x00, 0x00, 0x00, 46},  // Stick 1 -> left
    {0x08, 0x00, 0x00, 0x00, 34},  // Stick 1 -> rigth
    {0x10, 0x00, 0x00, 0x00, 17},  // Stick 1 -> fire

    {0x00, 0x01, 0x00, 0x00, 38},  // Stick 2 -> up
    {0x00, 0x02, 0x00, 0x00, 40},  // Stick 2 -> down
    {0x00, 0x04, 0x00, 0x00, 37},  // Stick 2 -> left
    {0x00, 0x08, 0x00, 0x00, 39},  // Stick 2 -> right
    {0x00, 0x10, 0x00, 0x00, 27},  // Stick 2 -> fire

};

KeyMapping keyMappings[] = {{0x01, 0x01, 0x00, 0x00, 0x2D},
                            {0x01, 0x02, 0x00, 0x00, 0x0D},
                            {0x01, 0x04, 0x00, 0x00, 0x00},
                            {0x01, 0x08, 0x00, 0x00, 0x00},
                            {0x01, 0x10, 0x00, 0x00, 0x00},
                            {0x01, 0x20, 0x00, 0x00, 0x00},
                            {0x01, 0x40, 0x00, 0x00, 0x00},
                            {0x01, 0x80, 0x00, 0x00, 0x00},
                            {0x02, 0x01, 0x00, 0x00, '3'},
                            {0x02, 0x01, 0x02, 0x80, '^'},  // shift
                            {0x02, 0x02, 0x00, 0x00, 'w'},
                            {0x02, 0x04, 0x00, 0x00, 'a'},
                            {0x02, 0x08, 0x00, 0x00, '4'},
                            {0x02, 0x08, 0x02, 0x80, '$'},  // shift
                            {0x02, 0x10, 0x00, 0x00, 'z'},
                            {0x02, 0x20, 0x00, 0x00, 's'},
                            {0x02, 0x40, 0x00, 0x00, 'e'},
                            {0x02, 0x80, 0x00, 0x00, 0x00},
                            {0x04, 0x01, 0x00, 0x00, '5'},
                            {0x04, 0x01, 0x02, 0x80, '%'},  // shift
                            {0x04, 0x02, 0x00, 0x00, 'r'},
                            {0x04, 0x04, 0x00, 0x00, 'd'},
                            {0x04, 0x08, 0x00, 0x00, '6'},
                            {0x04, 0x08, 0x02, 0x80, '&'},  // shift
                            {0x04, 0x10, 0x00, 0x00, 'c'},
                            {0x04, 0x20, 0x00, 0x00, 'f'},
                            {0x04, 0x40, 0x00, 0x00, 't'},
                            {0x04, 0x80, 0x00, 0x00, 'x'},
                            {0x08, 0x01, 0x00, 0x00, '7'},
                            // { 0x08, 0x01, 0x02, 0x80, '/' }, // shift
                            {0x08, 0x02, 0x00, 0x00, 'y'},
                            {0x08, 0x04, 0x00, 0x00, 'g'},
                            {0x08, 0x08, 0x00, 0x00, '8'},
                            {0x08, 0x08, 0x02, 0x80, '('},  // shift
                            {0x08, 0x10, 0x00, 0x00, 'b'},
                            {0x08, 0x20, 0x00, 0x00, 'h'},
                            {0x08, 0x40, 0x00, 0x00, 'u'},
                            {0x08, 0x80, 0x00, 0x00, 'v'},
                            {0x10, 0x01, 0x00, 0x00, '9'},
                            {0x10, 0x01, 0x02, 0x80, ')'},  // Shift
                            {0x10, 0x02, 0x00, 0x00, 'i'},
                            {0x10, 0x04, 0x00, 0x00, 'j'},
                            {0x10, 0x08, 0x00, 0x00, '0'},
                            {0x10, 0x08, 0x02, 0x80, '='},  // shift
                            {0x10, 0x10, 0x00, 0x00, 'm'},
                            {0x10, 0x20, 0x00, 0x00, 'k'},
                            {0x10, 0x40, 0x00, 0x00, 'o'},
                            {0x10, 0x80, 0x00, 0x00, 'n'},
                            {0x20, 0x01, 0x00, 0x00, '+'},
                            {0x20, 0x02, 0x00, 0x00, 'p'},
                            {0x20, 0x04, 0x00, 0x00, 'l'},
                            {0x20, 0x08, 0x00, 0x00, '-'},
                            {0x20, 0x10, 0x00, 0x00, '.'},
                            {0x20, 0x10, 0x02, 0x80, '>'},  // Shift
                            {0x20, 0x20, 0x00, 0x00, ':'},
                            {0x20, 0x40, 0x00, 0x00, '@'},
                            {0x20, 0x80, 0x00, 0x00, ','},
                            {0x20, 0x80, 0x02, 0x80, '<'},  // Shift
                            {0x40, 0x01, 0x00, 0x00, 0x00},
                            {0x40, 0x02, 0x00, 0x00, '*'},
                            {0x40, 0x04, 0x00, 0x00, ';'},
                            {0x40, 0x08, 0x00, 0x00, 0x00},
                            {0x40, 0x10, 0x00, 0x00, 0x00},
                            {0x40, 0x20, 0x00, 0x00, '='},
                            {0x40, 0x40, 0x00, 0x00, 0x00},
                            {0x40, 0x80, 0x00, 0x00, '/'},
                            {0x80, 0x01, 0x00, 0x00, '1'},
                            {0x01, 0x01, 0x00, 0x00, 0x08},  // Backspace
                            {0x80, 0x04, 0x00, 0x00, 0x00},
                            {0x80, 0x08, 0x00, 0x00, '2'},
                            {0x80, 0x10, 0x00, 0x00, ' '},
                            {0x80, 0x20, 0x00, 0x00, 0x00},
                            {0x80, 0x40, 0x00, 0x00, 'q'},
                            {0x80, 0x08, 0x02, 0x80, '"'},
                            {0x80, 0x80, 0x00, 0x00, '#'}};

#endif

#endif